---
version: 2.1

executors:
  dev-env:
    environment:
      DOCKER_TEMP_DEV_ENV_IMAGE: simonsdave/cloudfeaster-dev-env:bindle
      DOCKER_TEMP_RUNTIME_IMAGE: simonsdave/cloudfeaster:bindle
      DOCKER_TEMP_RUNTIME_LITE_IMAGE: simonsdave/cloudfeaster-lite:bindle
      # the SKIP_ variables simplify the process of quickly
      # enabling and disabling elements of the build process
      # without having to edit individual steps - wish CircleCI
      # had this capability
      #
      # important to quote these values otherwise CircleCI will assume
      # they are booleans and that complicates use of the parameters
      # in commands
      SKIP_RUNTIME: "no"
      SKIP_RUNTIME_LITE: "yes"
    docker:
      - image: simonsdave/focal-dev-env:v0.6.19
        auth:
          username: $DOCKER_EXECUTOR_DOCKERHUB_USERNAME
          password: $DOCKER_EXECUTOR_DOCKERHUB_PASSWORD
    resource_class: medium

commands:
  my_setup_remote_docker:
    steps:
      - setup_remote_docker:
          version: 19.03.13
  push_docker_image_to_dockerhub:
    parameters:
      docker_image:
        type: string
      skip:
        type: string
        default: "no"
    steps:
      - deploy:
          name: Push Docker Image to DockerHub - << parameters.docker_image >>
          command: |
            if [[ "<< parameters.skip >>" == "no" ]]; then
              if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
                dockerfiles/tag-and-push-docker-image.sh \
                  "<< parameters.docker_image >>" \
                  "latest" \
                  "${DOCKER_PASSWORD}"
              fi

              if [[ "${CIRCLE_BRANCH}" =~ ^release-([0-9]+.)*[0-9]+$ ]]; then
                dockerfiles/tag-and-push-docker-image.sh \
                  "<< parameters.docker_image >>" \
                  "v${CIRCLE_BRANCH##release-}" \
                  "${DOCKER_PASSWORD}"
              fi
            fi
  run_docker_image_vulnerability_risk_assessment:
    parameters:
      docker_image:
        type: string
      whitelist:
        type: string
      skip:
        type: string
        default: "no"
    steps:
      - run:
          name: Run docker image vulnerability risk assessment - << parameters.docker_image >>
          command: |
            if [[ "<< parameters.skip >>" == "no" ]]; then
              curl \
                -s \
                -L \
                https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \
                bash -s -- --verbose --whitelist "<< parameters.whitelist >>" "<< parameters.docker_image >>"
            fi
  run_runtime_docker_image_integration_tests:
    parameters:
      docker_image:
        type: string
      skip:
        type: string
        default: "no"
    steps:
      - run:
          name: Test Docker Image - << parameters.docker_image >>
          command: |
            if [[ "<< parameters.skip >>" == "no" ]]; then
              tests/integration/runtime/docker_image_integration_tests.sh \
                --verbose \
                "<< parameters.docker_image >>"
            fi

jobs:
  build_test_and_deploy:
    working_directory: ~/repo
    executor: dev-env
    parameters:
      # dev_env_int_test_output_dir is a parameter only because this value is shared
      # across stesp and commands can't have environment variables
      dev_env_int_test_output_dir:
        default: "/tmp/dev-env-int-test-output"
        type: string
    steps:
      - checkout
      - run:
          name: Install Chrome
          command: |
            BROWSER=$(grep ^RUN ./dockerfiles/dev-env/Dockerfile | grep install-chrome.sh | sed -e 's|^.*--||g')
            bin/install-chrome.sh "--${BROWSER}"
      - run:
          name: Install Chromedriver
          command: bin/install-chromedriver.sh
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "setup.py" }}
            - v1-dependencies-
      - run:
          name: Install Python prerequisites
          command: python3.9 setup.py install
      - save_cache:
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "setup.py" }}
      - run:
          name: Run pip check
          command: run-pip-check.sh
      - run:
          name: Lint Python Files
          command: run-flake8.sh
      - run:
          name: PyCQA/bandit
          command: run-bandit.sh
      - run:
          name: Lint Shell Scripts
          command: run-shelllint.sh --verbose
      - run:
          name: Lint Markdown Files
          command: run-markdownlint.sh --verbose
      - run:
          name: Lint YAML Files
          command: run-yamllint.sh --verbose
      - run:
          name: Lint JSON Files
          command: run-jsonlint.sh --verbose
      - run:
          name: Scan repo for passwords, private keys, etc.
          command: run-repo-security-scanner.sh
      - run:
          name: Run unit tests
          command: run-unit-tests.sh
      - run:
          name: Upload Unit Test Coverage Data to Codecov
          command: run-codecov-uploader.sh
      - run:
          name: Build README.rst
          command: build-readme-dot-rst.sh
      - run:
          name: Build python packages
          command: build-python-package.sh
      - store_artifacts:
          path: dist
          destination: dist
      - my_setup_remote_docker
      - run:
          command: echo 'dave was here'
      - run:
          name: Build docker image - Dev Env
          command: |
            dockerfiles/dev-env/build-docker-image.sh \
              "dist/cloudfeaster-$(python-version.sh).tar.gz" \
              "${DOCKER_TEMP_DEV_ENV_IMAGE}"
      - run:
          name: Build docker image - Runtime
          command: |
            if [[ "${SKIP_RUNTIME:-}" == "no" ]]; then
              dockerfiles/runtime/build-docker-image.sh \
                "dist/cloudfeaster-$(python-version.sh).tar.gz" \
                "${DOCKER_TEMP_RUNTIME_IMAGE}"
            fi
      - run:
          name: Build docker image - Runtime Lite
          command: |
            if [[ "${SKIP_RUNTIME_LITE:-}" == "no" ]]; then
              dockerfiles/runtime-lite/build-docker-image.sh \
                "dist/cloudfeaster-$(python-version.sh).tar.gz" \
                "${DOCKER_TEMP_RUNTIME_LITE_IMAGE}"
            fi
      - run:
          name: Test docker image - Dev Env
          command: |
            tests/integration/dev-env/docker_image_integration_tests.sh \
              --verbose \
              --output "<< parameters.dev_env_int_test_output_dir >>" \
              "${DOCKER_TEMP_DEV_ENV_IMAGE}" \
              "${PYPI_USERNAME}" \
              "${PYPI_PASSWORD}"

            pushd "<< parameters.dev_env_int_test_output_dir >>"; zip -r "<< parameters.dev_env_int_test_output_dir >>.zip" .; popd
      - store_artifacts:
          # :BUG'ish: should be able to use environment variable
          # on the path since the filename is shared between this step
          # and the preivous one but CI pipeline didn't seem to replace
          # the path's value when it was an environment variable
          path: << parameters.dev_env_int_test_output_dir >>.zip
          destination: dev-env-int-test-output.zip
      - run:
          name: fail workflow if crawl failed
          command: |
            #
            # we force the "Test docker image" step to succeed regardless of
            # the success/failure of a particular test. However, we
            # actually want the workflow to fail if any test fails
            # and we want to store artifacts before failing the workflow because
            # those artifacts will be used to debug a failed test. This is all
            # to explain the need for this what might feel like odd commands
            # below.
            #
            for CRAWL_OUTPUT_DOT_JSON in $(find "<< parameters.dev_env_int_test_output_dir >>" -name crawl-output.json); do
                if [[ "$(jq ._metadata.status.code "${CRAWL_OUTPUT_DOT_JSON}")" != "0" ]]; then
                    echo "Found failure in ${CRAWL_OUTPUT_DOT_JSON}"
                    false
                fi
            done
      - run_runtime_docker_image_integration_tests:
          docker_image: ${DOCKER_TEMP_RUNTIME_IMAGE}
          skip: ${SKIP_RUNTIME:-}
      - run_runtime_docker_image_integration_tests:
          docker_image: ${DOCKER_TEMP_RUNTIME_LITE_IMAGE}
          skip: ${SKIP_RUNTIME_LITE:-}
      - run_docker_image_vulnerability_risk_assessment:
          docker_image: ${DOCKER_TEMP_DEV_ENV_IMAGE}
          whitelist: "file://clair-cicd-whitelist-dev-env.json"
      - run_docker_image_vulnerability_risk_assessment:
          docker_image: ${DOCKER_TEMP_RUNTIME_IMAGE}
          whitelist: "file://clair-cicd-whitelist-runtime.json"
          skip: ${SKIP_RUNTIME:-}
      - run_docker_image_vulnerability_risk_assessment:
          docker_image: ${DOCKER_TEMP_RUNTIME_LITE_IMAGE}
          whitelist: "file://clair-cicd-whitelist-runtime-lite.json"
          skip: ${SKIP_RUNTIME_LITE:-}
      - push_docker_image_to_dockerhub:
          docker_image: ${DOCKER_TEMP_DEV_ENV_IMAGE}
      - push_docker_image_to_dockerhub:
          docker_image: ${DOCKER_TEMP_RUNTIME_IMAGE}
          skip: ${SKIP_RUNTIME:-}
      - push_docker_image_to_dockerhub:
          docker_image: ${DOCKER_TEMP_RUNTIME_LITE_IMAGE}
          skip: ${SKIP_RUNTIME_LITE:-}

workflows:
  version: 2
  commit:
    jobs:
      - build_test_and_deploy:
          context:
            - cloudfeaster
            - docker-executor
